/**
 * Gemma 3N AI Agent for LifeLight
 * Provides offline AI-powered medication insights and recommendations
 */

import { db, type Medication, type HealthLog } from '@/lib/db/database';

export interface GemmaResponse {
  type: 'insight' | 'recommendation' | 'warning' | 'question';
  title: string;
  content: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  action?: string;
}

// WebLLM types and interfaces
// eslint-disable-next-line @typescript-eslint/no-explicit-any
interface WebLLMEngine {
  reload: (modelId: string | string[], chatOpts?: unknown) => Promise<void>;
  chat: (messages: Array<{role: string; content: string}>, options?: unknown) => Promise<string>;
  runtimeStatsText: () => string;
  unload: () => Promise<void>;
}

export class GemmaAgent {
  private isInitialized = false;
  private engine: WebLLMEngine | null = null;
  private modelId = 'gemma-2b-it-q4f16_1-MLC';
  private fallbackMode = false;

  async initialize(): Promise<void> {
    try {
      console.log('üîß Initializing Gemma 3N AI Agent...');
      
      try {
        // Attempt to load WebLLM dynamically
        const { CreateMLCEngine } = await import('@mlc-ai/web-llm');
        
        // Create engine with healthcare-optimized configuration
        const mlcEngine = await CreateMLCEngine(this.modelId, {
          initProgressCallback: (progress: {progress: number}) => {
            console.log('Model loading progress:', Math.round(progress.progress * 100) + '%');
          }
        });
        this.engine = mlcEngine as unknown as WebLLMEngine;

        console.log('‚úÖ Real Gemma 3N model loaded successfully');
        this.isInitialized = true;
        
      } catch (webLLMError) {
        console.warn('‚ö†Ô∏è WebLLM not available, using fallback mode:', webLLMError);
        this.fallbackMode = true;
        this.isInitialized = true;
        
        // Simulate model loading for fallback
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log('‚úÖ Gemma 3N AI Agent initialized (fallback mode)');
      }
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Gemma 3N AI Agent:', error);
      // Still allow fallback mode even if initialization fails
      this.fallbackMode = true;
      this.isInitialized = true;
    }
  }

  async generateInsight(
    userId: number,
    context: 'medication' | 'health' | 'interaction' | 'general'
  ): Promise<GemmaResponse> {
    if (!this.isInitialized) {
      throw new Error('Gemma Agent not initialized');
    }

    try {
      // Get user data for context
      const [medications, healthLogs] = await Promise.all([
        db.getUserMedications(userId),
        db.getUserHealthLogs(userId, 10)
      ]);

      let insight: GemmaResponse;

      if (!this.fallbackMode && this.engine) {
        // Use real AI to generate insights
        insight = await this.generateRealInsight(medications, healthLogs, context);
      } else {
        // Use fallback method for development/compatibility
        insight = await this.analyzeUserData(medications, healthLogs, context);
      }
      
      // Save insight to database
      await db.addAIInsight({
        userId,
        type: context,
        title: insight.title,
        content: insight.content,
        priority: insight.priority,
        isRead: false,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days
      });

      return insight;
    } catch (error) {
      console.error('Failed to generate insight:', error);
      throw error;
    }
  }

  private async generateRealInsight(
    medications: Medication[],
    healthLogs: HealthLog[],
    context: string
  ): Promise<GemmaResponse> {
    try {
      // Prepare context information
      const medicationList = medications.map(med => `${med.name} ${med.dosage} ${med.frequency}`).join(', ');
      const recentHealthScore = healthLogs.length > 0 ? healthLogs[0].healthScore : null;
      const recentSymptoms = healthLogs.length > 0 ? (healthLogs[0].symptoms || []).join(', ') : '';

      // Create healthcare-focused prompt
      const systemPrompt = `You are a healthcare AI assistant for medication management. Always include medical disclaimers and recommend consulting healthcare professionals. Focus on medication safety, adherence, and general health guidance.`;

      let userPrompt = '';
      
      switch (context) {
        case 'medication':
          userPrompt = `Based on medications: ${medicationList}. Provide a medication management insight. Include timing, adherence tips, or general medication safety advice.`;
          break;
        case 'health':
          userPrompt = `Health score: ${recentHealthScore}, Recent symptoms: ${recentSymptoms}. Provide a health insight focused on overall wellness and medication adherence.`;
          break;
        case 'interaction':
          userPrompt = `Medications: ${medicationList}. Check for potential interactions, food restrictions, or safety considerations.`;
          break;
        case 'general':
          userPrompt = `Medications: ${medicationList}, Health score: ${recentHealthScore}. Provide general health and medication management advice.`;
          break;
      }

      // Generate AI response
      const messages = [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ];

      const aiResponse = await this.engine!.chat(messages, {
        temperature: 0.7,
        max_gen_len: 512
      });

      // Parse and structure the response
      const insight = this.parseAIResponse(aiResponse, context);
      return insight;

    } catch (error) {
      console.error('Real AI insight generation failed:', error);
      // Fallback to predefined insights if AI fails
      return this.analyzeUserData(medications, healthLogs, context);
    }
  }

  private parseAIResponse(aiResponse: string, context: string): GemmaResponse {
    // Extract title from AI response or create contextual title
    const title = this.generateContextualTitle(context);
    
    // Determine priority based on keywords
    const content = aiResponse.trim();
    const priority = this.determinePriority(content);
    const actionable = this.isActionable(content);
    
    // Determine response type
    let type: 'insight' | 'recommendation' | 'warning' | 'question' = 'insight';
    if (content.toLowerCase().includes('warning') || content.toLowerCase().includes('caution')) {
      type = 'warning';
    } else if (content.toLowerCase().includes('recommend') || content.toLowerCase().includes('suggest')) {
      type = 'recommendation';
    } else if (content.includes('?')) {
      type = 'question';
    }

    return {
      type,
      title,
      content: content + '\n\n‚ö†Ô∏è Always consult your healthcare provider for medical advice.',
      priority,
      actionable,
      action: actionable ? 'Review with healthcare provider' : undefined
    };
  }

  private generateContextualTitle(context: string): string {
    const titles = {
      medication: 'Medication Management Insight',
      health: 'Health Tracking Insight',
      interaction: 'Drug Interaction Check',
      general: 'Health & Wellness Insight'
    };
    return titles[context as keyof typeof titles] || 'AI Health Insight';
  }

  private determinePriority(content: string): 'low' | 'medium' | 'high' {
    const lowerContent = content.toLowerCase();
    if (lowerContent.includes('urgent') || lowerContent.includes('serious') || lowerContent.includes('danger')) {
      return 'high';
    } else if (lowerContent.includes('important') || lowerContent.includes('consider') || lowerContent.includes('monitor')) {
      return 'medium';
    }
    return 'low';
  }

  private isActionable(content: string): boolean {
    const actionKeywords = ['consult', 'contact', 'schedule', 'monitor', 'adjust', 'consider', 'review'];
    const lowerContent = content.toLowerCase();
    return actionKeywords.some(keyword => lowerContent.includes(keyword));
  }

  private async analyzeUserData(
    medications: Medication[],
    healthLogs: HealthLog[],
    context: string
  ): Promise<GemmaResponse> {
    // Simulate AI analysis with predefined insights
    const insights: GemmaResponse[] = [
      {
        type: 'insight',
        title: 'Medication Adherence Pattern',
        content: 'I notice you\'ve been taking your medications consistently this week. Great job maintaining your health routine!',
        priority: 'low',
        actionable: false
      },
      {
        type: 'recommendation',
        title: 'Optimal Timing Suggestion',
        content: 'Consider taking Metformin with your morning meal to improve absorption and reduce side effects.',
        priority: 'medium',
        actionable: true,
        action: 'Adjust medication timing'
      },
      {
        type: 'warning',
        title: 'Potential Interaction Alert',
        content: 'Your current medications may interact with grapefruit. Avoid grapefruit and grapefruit juice while taking these medications.',
        priority: 'high',
        actionable: true,
        action: 'Review food interactions'
      },
      {
        type: 'question',
        title: 'Health Score Trend',
        content: 'Your health score has improved by 15% this week. Are you experiencing any new symptoms or side effects?',
        priority: 'medium',
        actionable: true,
        action: 'Log health update'
      }
    ];

    // Return context-appropriate insight
    const contextInsights = insights.filter(insight => {
      if (context === 'medication') return insight.type === 'insight' || insight.type === 'recommendation';
      if (context === 'health') return insight.type === 'question' || insight.type === 'insight';
      if (context === 'interaction') return insight.type === 'warning';
      return true;
    });

    return contextInsights[Math.floor(Math.random() * contextInsights.length)];
  }

  async checkDrugInteractions(medications: string[]): Promise<GemmaResponse[]> {
    if (!this.isInitialized) {
      throw new Error('Gemma Agent not initialized');
    }

    // Simulate drug interaction analysis
    const interactions: GemmaResponse[] = [];
    
    if (medications.includes('Metformin') && medications.includes('Lisinopril')) {
      interactions.push({
        type: 'warning',
        title: 'Blood Sugar Monitoring',
        content: 'Metformin and Lisinopril may affect blood sugar levels. Monitor your blood glucose more frequently.',
        priority: 'medium',
        actionable: true,
        action: 'Schedule blood test'
      });
    }

    if (medications.includes('Aspirin') && medications.includes('Ibuprofen')) {
      interactions.push({
        type: 'warning',
        title: 'Pain Medication Interaction',
        content: 'Taking Aspirin and Ibuprofen together may increase bleeding risk. Consult your doctor for proper dosing.',
        priority: 'high',
        actionable: true,
        action: 'Contact healthcare provider'
      });
    }

    return interactions;
  }

  async provideMedicationAdvice(medicationName: string, question: string): Promise<string> {
    if (!this.isInitialized) {
      throw new Error('Gemma Agent not initialized');
    }

    try {
      if (!this.fallbackMode && this.engine) {
        // Use real AI for medication advice
        const systemPrompt = `You are a healthcare AI assistant specializing in medication guidance. Provide accurate, helpful information about medications while always emphasizing the importance of consulting healthcare professionals. Include relevant safety information and common considerations.`;
        
        const userPrompt = `Provide advice about ${medicationName}. User question: "${question}". Include dosing guidance, common side effects, food interactions, and important safety considerations.`;

        const messages = [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ];

        const aiResponse = await this.engine.chat(messages, {
          temperature: 0.7,
          max_gen_len: 512
        });

        return aiResponse.trim() + '\n\n‚ö†Ô∏è This information is for educational purposes only. Always consult your healthcare provider for personalized medical advice.';
      } else {
        // Fallback to predefined advice
        return this.getFallbackMedicationAdvice(medicationName);
      }
    } catch (error) {
      console.error('Error providing medication advice:', error);
      return this.getFallbackMedicationAdvice(medicationName);
    }
  }

  private getFallbackMedicationAdvice(medicationName: string): string {
    const adviceMap: { [key: string]: string } = {
      'Metformin': 'Metformin is typically taken with meals to reduce gastrointestinal side effects. Common side effects include nausea and diarrhea, which usually improve over time.',
      'Lisinopril': 'Lisinopril should be taken at the same time each day. Avoid high-sodium foods and stay hydrated. Report any persistent dry cough to your doctor.',
      'Vitamin D3': 'Vitamin D3 is best absorbed when taken with fatty foods. Take in the morning for better absorption and to avoid affecting sleep.',
      'Aspirin': 'Take Aspirin with food to reduce stomach irritation. Avoid alcohol while taking Aspirin to prevent stomach bleeding.',
      'Ibuprofen': 'Take Ibuprofen with food or milk to protect your stomach. Do not take for more than 10 days without consulting your doctor.'
    };

    return adviceMap[medicationName] || 'Please consult your healthcare provider for specific advice about this medication.';
  }

  async generateHealthRecommendations(healthLogs: HealthLog[]): Promise<GemmaResponse[]> {
    if (!this.isInitialized) {
      throw new Error('Gemma Agent not initialized');
    }

    const recommendations: GemmaResponse[] = [];
    
    // Analyze health trends
    const recentLogs = healthLogs.slice(0, 7);
    const avgHealthScore = recentLogs.reduce((sum, log) => sum + log.healthScore, 0) / recentLogs.length;

    if (avgHealthScore < 70) {
      recommendations.push({
        type: 'recommendation',
        title: 'Health Score Improvement',
        content: 'Your health score has been below optimal levels. Consider increasing physical activity and improving sleep quality.',
        priority: 'medium',
        actionable: true,
        action: 'View health tips'
      });
    }

    if (recentLogs.some(log => log.symptoms?.includes('fatigue'))) {
      recommendations.push({
        type: 'recommendation',
        title: 'Fatigue Management',
        content: 'I notice you\'ve been experiencing fatigue. Ensure adequate sleep, stay hydrated, and consider light exercise.',
        priority: 'medium',
        actionable: true,
        action: 'Set sleep reminder'
      });
    }

    return recommendations;
  }

  async isReady(): Promise<boolean> {
    return this.isInitialized;
  }

  async shutdown(): Promise<void> {
    if (this.engine && !this.fallbackMode) {
      try {
        await this.engine.unload();
        console.log('üîå Gemma 3N model unloaded');
      } catch (error) {
        console.error('Error unloading model:', error);
      }
    }
    
    this.isInitialized = false;
    this.engine = null;
    this.fallbackMode = false;
    console.log('üîå Gemma 3N AI Agent shutdown');
  }
}

// Singleton instance
export const gemmaAgent = new GemmaAgent(); 
